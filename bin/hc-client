#!/usr/bin/env node
'use strict';

const hackchain = require('../');

const assert = require('assert');
const async = require('async');
const colors = require('colors');
const fs = require('fs');
const path = require('path');
const prompt = require('prompt');
const yaml = require('js-yaml');

const yargs = require('yargs')
    .usage('Usage: $0 --block <hash>\n' +
           '       $0 --tx <hash>\n' +
           '       $0 --spend example.tx\n' +
           '       $0 --info\n' +
           '       $0 --unspent')
    .alias('s', 'server')
    .describe('s', 'server address')
    .describe('block', 'block hash')
    .describe('tx', 'tx hash')
    .describe('spend', 'path to TX description')
    .describe('info', 'fetch server info')
    .describe('unspent', 'get the list of top unspent coins')
    .default('server', 'https://api.hackchain.darksi.de/')
const argv = yargs.argv;

const client = new hackchain.Client(argv.server);

if (argv.block) {
  client.getBlock(argv.block, (err, block) => {
    if (err)
      throw err;

    console.log(block);
  });
  return;
}

if (argv.tx) {
  client.getTX(argv.tx, (err, tx) => {
    if (err)
      throw err;

    console.log(tx);
  });
  return;
}

if (argv.spend) {
  const text = fs.readFileSync(argv.spend).toString();
  const data = yaml.safeLoad(text);

  const confirm = (tx, callback) => {
    console.log('Parsed following TX:'.green);
    console.log(tx);

    prompt.start();
    prompt.get({
      properties: {
        confirm: {
          description: 'Send to server? (yes or no)',
          pattern: /^(yes|no|y|n)$/,
          message: 'Please type either `yes` or `no` (or `y`/`n`)',
          required: true
        }
      }
    }, (err, result) => {
      if (err)
        throw err;

      if (!/y/.test(result.confirm))
        return callback('... cancelled');

      callback(null);
    });
  };

  client.parseTX(data, (err, tx) => {
    if (err)
      throw err;

    async.parallel({
      confirm: (callback) => {
        confirm(tx, callback);
      },
      nonce: (callback) => {
        client.getNonce(callback);
      }
    }, (err, results) => {
      if (err)
        throw err;

      client.spendTX(tx, results.nonce, (err) => {
        if (err)
          throw err;

        console.log('!!! Success, tx: %s !!!', tx.hash().toString('hex'));
        console.log('NOTE: server must mint a new block before ' +
                    'this TX will be available');
      });
    });
  });
  return;
}

if (argv.info) {
  client.getInfo((err, info) => {
    if (err)
      throw err;

    console.log(info);
  });
  return;
}

if (argv.unspent) {
  client.getUnspent((err, unspent) => {
    if (err)
      throw err;

    console.log(`${'NOTE:'.red} It is important to use ${'both hash'.bold} ` +
                `and ${'index'.bold} to spend a transaction`);
    console.log(unspent);
  });
  return;
}

yargs.showHelp();
